# -*- coding: utf-8 -*-
"""Greedy Best First Search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18_vBRXjQhf67nL_arRhKZ4BUybWOBlOW
"""

from queue import PriorityQueue

def greedy_best_first_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))
    explored = set()
    path = {}

    while not frontier.empty():
        _, current = frontier.get()

        if current == goal:
            print("Greedy Best-First Search: Jalur ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur:", route)
            return route

        explored.add(current)

        for neighbor, _ in graph[current]:
            if neighbor not in explored and neighbor not in path:
                frontier.put((heuristic[neighbor], neighbor))
                path[neighbor] = current

    print("Jalur tidak ditemukan!")
    return None

def a_star_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((0 + heuristic[start], 0, start))
    explored = {}
    path = {}

    while not frontier.empty():
        _, cost, current = frontier.get()

        if current == goal:
            print("A* Search: Jalur ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur:", route)
            return route

        explored[current] = cost

        for neighbor, weight in graph[current]:
            new_cost = cost + weight
            if neighbor not in explored or new_cost < explored[neighbor]:
                frontier.put((new_cost + heuristic[neighbor], new_cost, neighbor))
                path[neighbor] = current
                explored[neighbor] = new_cost

    print("Jalur tidak ditemukan!")
    return None

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

heuristic = {
    'S': 6,
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'G': 0
}

graph = {
    'S': [('A', 5), ('B', 2)],
    'A': [('D', 1)],
    'B': [('A', 2), ('C', 2)],
    'C': [('D', 3), ('G', 4)],
    'D': [('G', 3)],
    'G': []
}

start_node = 'S'
goal_node = 'G'

greedy_best_first_search(graph, heuristic, start_node, goal_node)
a_star_search(graph, heuristic, start_node, goal_node)